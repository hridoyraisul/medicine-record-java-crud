/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package mymedapp;

import java.sql.*;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
//import javax.swing.table.DefaultTableModel;

/**
 *
 * @author raisul
 */
public class medInfo extends javax.swing.JFrame {
    
    private static final String JDBC_URL = "jdbc:mysql://localhost:3306/medicine_record";
    private static final String USERNAME = "raisulhridoy";
    private static final String PASSWORD = "96369";
   

    /**
     * Creates new form medInfo
     */
    public medInfo() {
        initComponents();
         try (Connection connection = DriverManager.getConnection(JDBC_URL, USERNAME, PASSWORD)) {
            loadTable(connection);
         } catch (SQLException e) {
              System.out.println( e.getMessage());
         }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        nameValue = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        descriptionValue = new javax.swing.JTextArea();
        typeValue = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        timeValue = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(220, 0, 150));
        jLabel1.setText("Medicine Record");
        jLabel1.setBorder(javax.swing.BorderFactory.createCompoundBorder());
        jLabel1.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));

        jPanel1.setBackground(new java.awt.Color(20, 150, 200));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Medicine", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Comic Sans MS", 0, 18), new java.awt.Color(180, 0, 50))); // NOI18N

        jLabel2.setForeground(new java.awt.Color(242, 242, 242));
        jLabel2.setText("Name");

        jLabel3.setForeground(new java.awt.Color(242, 242, 242));
        jLabel3.setText("Description");

        jLabel4.setForeground(new java.awt.Color(242, 242, 242));
        jLabel4.setText("Time");

        jLabel5.setForeground(new java.awt.Color(242, 242, 242));
        jLabel5.setText("Type");

        nameValue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameValueActionPerformed(evt);
            }
        });

        descriptionValue.setColumns(20);
        descriptionValue.setRows(5);
        jScrollPane1.setViewportView(descriptionValue);

        typeValue.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Before Eating", "After Eating" }));
        typeValue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                typeValueActionPerformed(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(155, 50, 255));
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Add New");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(25, 55, 150));
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setText("Edit");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(50, 120, 190));
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setText("Remove");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        timeValue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timeValueActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jLabel3))
                .addGap(50, 50, 50)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2)
                        .addGap(18, 18, 18)
                        .addComponent(jButton3)
                        .addGap(0, 4, Short.MAX_VALUE))
                    .addComponent(jScrollPane1)
                    .addComponent(nameValue)
                    .addComponent(typeValue, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(timeValue))
                .addGap(26, 26, 26))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(nameValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(jLabel3))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(timeValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(typeValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        jTable1.setAutoCreateRowSorter(true);
        jTable1.setBackground(new java.awt.Color(20, 200, 200));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Description", "Time", "Type"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable1.setColumnSelectionAllowed(false);
        jScrollPane2.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(383, 383, 383)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(118, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void typeValueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_typeValueActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_typeValueActionPerformed

    private static void createNewRecord(Connection connection, String name, String description, String time, String type) throws SQLException {    
        String sql = "INSERT INTO medicine (name,description,time,type,status) VALUES (?, ?, ?, ?, 'active')";
        try (PreparedStatement statement = connection.prepareStatement(sql)) {
            statement.setString(1, name);
            statement.setString(2, description);
            statement.setString(3, time);
            statement.setString(4, type);
            statement.executeUpdate();
            System.out.println("Medicine record created for " + name);
        }
    }
    
    private static void updateRecord(Connection connection, int id, String name, String description, String time, String type) throws SQLException {
        String sql = "UPDATE medicine SET name = ?, description = ?, time = ?, type = ? WHERE id = ?";
        try (PreparedStatement statement = connection.prepareStatement(sql)) {
            statement.setString(1, name);
            statement.setString(2, description);
            statement.setString(3, time);
            statement.setString(4, type);
            statement.setInt(5, id);
            statement.executeUpdate();
            System.out.println("Medicine record updated for " + name);
        }
    }
    
    private static void deleteRecord(Connection connection, int id) throws SQLException {
        String sql = "DELETE FROM medicine WHERE id = ?";
        try (PreparedStatement statement = connection.prepareStatement(sql)) {
            statement.setInt(1, id);
            statement.executeUpdate();
            System.out.println("Medicine record deleted!");
        }
    }
    
    private static void viewRecord(Connection connection, int id, String name, String description, String time, String type) throws SQLException {
        String sql = "SELECT * FROM medicine WHERE id = ?";
        try (PreparedStatement statement = connection.prepareStatement(sql)) {
            statement.setString(1, name);
            statement.setString(2, description);
            statement.setString(3, time);
            statement.setString(4, type);
            statement.setInt(5, id);
            statement.executeUpdate();
            System.out.println("Medicine record updated for " + name);
        }
    }
    
    private void clearForm() {
        nameValue.setText("");
        descriptionValue.setText("");
        timeValue.setText("");
        typeValue.setSelectedIndex(0);
        nameValue.requestFocus();
    }
    
    
   
    
    
    private void loadTable(Connection connection){
        int cnt;
        try{
            PreparedStatement pat = connection.prepareStatement("SELECT * FROM medicine");
            ResultSet Res = pat.executeQuery();
            ResultSetMetaData RSMD = Res.getMetaData();
            cnt = RSMD.getColumnCount();
            DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
            dtm.setRowCount(0);
            
            while(Res.next()){
                Vector v2 = new Vector();
                for(int i = 1; i <= cnt; i++){
                    //v2.add(Res.getString("id"));
                    v2.add(Res.getString("name"));
                    v2.add(Res.getString("description"));
                    v2.add(Res.getString("time"));
                    v2.add(Res.getString("type"));
                }
                dtm.addRow(v2);
            }
         } catch (SQLException e) {
             System.out.println( e.getMessage());
         }
        
    }
    
    private static void fetchTableData(Connection connection) throws SQLException {
        String sql = "SELECT * FROM medicine";
        try (Statement statement = connection.createStatement();
            ResultSet resultSet = statement.executeQuery(sql)) {
 
            System.out.println("---- medicine ----");
            while (resultSet.next()) {
                int id = resultSet.getInt("id");
                String name = resultSet.getString("name");
                String description = resultSet.getString("description");
                System.out.println("ID: " + id + ", Name: " + name + ", Description: " + description);
            }
            System.out.println("------------------");
        
        }
    }
    
    //Create New Record
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String name = nameValue.getText();
        String description = descriptionValue.getText();
        String time = timeValue.getText();
        String type = typeValue.getSelectedItem().toString();
        
        try (Connection connection = DriverManager.getConnection(JDBC_URL, USERNAME, PASSWORD)) {
            createNewRecord(connection,name,description,time,type);
            JOptionPane.showMessageDialog(this,"Medicine Record Added Successfully!");
            clearForm();
            loadTable(connection);
        } catch (SQLException e) {
             System.out.println( e.getMessage());
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    // Update existing record
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        int id = 2;
        String name = nameValue.getText();
        String description = descriptionValue.getText();
        String time = timeValue.getText();
        String type = typeValue.getSelectedItem().toString();
        
        try (Connection connection = DriverManager.getConnection(JDBC_URL, USERNAME, PASSWORD)) {
            updateRecord(connection,id,name,description,time,type);
            JOptionPane.showMessageDialog(this,"Medicine Record Updated Successfully!");
            clearForm();
            loadTable(connection);
        } catch (SQLException e) {
             System.out.println( e.getMessage());
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    // Delete a record
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        int id = 1;
        try (Connection connection = DriverManager.getConnection(JDBC_URL, USERNAME, PASSWORD)) {
            deleteRecord(connection,id);
            JOptionPane.showMessageDialog(this,"Medicine Record Deleted Successfully!");
            clearForm();
            loadTable(connection);
        } catch (SQLException e) {
             System.out.println( e.getMessage());
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void nameValueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameValueActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameValueActionPerformed

    private void timeValueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timeValueActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_timeValueActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(medInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(medInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(medInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(medInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new medInfo().setVisible(true);
         
//                try (Connection connection = DriverManager.getConnection(JDBC_URL, USERNAME, PASSWORD)) {
//                    loadTable(connection);
//                 } catch (SQLException e) {
//                      System.out.println( e.getMessage());
//                 }
            }
        });
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea descriptionValue;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField nameValue;
    private javax.swing.JTextField timeValue;
    private javax.swing.JComboBox<String> typeValue;
    // End of variables declaration//GEN-END:variables
}
